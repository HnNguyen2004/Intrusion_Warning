"""
Demo script ƒë·ªÉ test c√°c ch·ª©c nƒÉng c·ªßa h·ªá th·ªëng Intrusion Warning
"""

from config import (
    TELEGRAM_BOT_TOKEN, 
    TELEGRAM_CHAT_ID, 
    LOG_FILE, 
    CAMERA_INDEX, 
    ALERT_IMAGES_DIR
)
from telegram_handler import TelegramHandler
from logger import IntrusionLogger
import cv2
import time

def test_camera():
    """Test camera connection"""
    print("üìπ Testing camera connection...")
    cap = cv2.VideoCapture(CAMERA_INDEX)
    
    if not cap.isOpened():
        print("‚ùå Camera kh√¥ng th·ªÉ m·ªü")
        return False
    
    ret, frame = cap.read()
    if not ret:
        print("‚ùå Kh√¥ng th·ªÉ ƒë·ªçc frame t·ª´ camera")
        cap.release()
        return False
    
    print(f"‚úÖ Camera ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng (Resolution: {frame.shape[1]}x{frame.shape[0]})")
    cap.release()
    return True

def test_telegram():
    """Test Telegram connection"""
    print("üì± Testing Telegram connection...")
    
    if TELEGRAM_BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ö†Ô∏è  Telegram Bot Token ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh")
        return False
    
    telegram = TelegramHandler(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID)
    success = telegram.send_message("üß™ Test message t·ª´ Intrusion Warning System")
    
    if success:
        print("‚úÖ Telegram connection th√†nh c√¥ng")
    else:
        print("‚ùå Telegram connection th·∫•t b·∫°i")
    
    return success

def test_logger():
    """Test logging system"""
    print("üìù Testing logger...")
    
    logger = IntrusionLogger(LOG_FILE)
    logger.log_detection(
        detection_type="Test Detection",
        confidence=0.95,
        image_path="test_image.jpg",
        alert_sent=True
    )
    
    # ƒê·ªçc l·∫°i log
    history = logger.get_detection_history(1)
    if history and len(history) > 0:
        print("‚úÖ Logger ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng")
        print(f"   Last log: {history[-1]}")
        return True
    else:
        print("‚ùå Logger kh√¥ng ho·∫°t ƒë·ªông")
        return False

def test_directories():
    """Test th∆∞ m·ª•c v√† file"""
    print("üìÅ Testing directories...")
    
    import os
    
    # Ki·ªÉm tra th∆∞ m·ª•c alert_images
    if os.path.exists(ALERT_IMAGES_DIR):
        print(f"‚úÖ Th∆∞ m·ª•c {ALERT_IMAGES_DIR} t·ªìn t·∫°i")
    else:
        print(f"‚ùå Th∆∞ m·ª•c {ALERT_IMAGES_DIR} kh√¥ng t·ªìn t·∫°i")
        return False
    
    # Th·ª≠ t·∫°o file test trong th∆∞ m·ª•c
    test_file = os.path.join(ALERT_IMAGES_DIR, "test.txt")
    try:
        with open(test_file, 'w') as f:
            f.write("test")
        os.remove(test_file)
        print(f"‚úÖ C√≥ th·ªÉ ghi file v√†o {ALERT_IMAGES_DIR}")
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ ghi file: {e}")
        return False
    
    return True

def main():
    """Ch·∫°y t·∫•t c·∫£ c√°c test"""
    print("=" * 60)
    print("üß™ INTRUSION WARNING SYSTEM - DEMO & TEST")
    print("=" * 60)
    
    tests = [
        ("Directories", test_directories),
        ("Camera", test_camera),
        ("Logger", test_logger),
        ("Telegram", test_telegram),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n[{test_name.upper()}]")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå L·ªói trong test {test_name}: {e}")
            results.append((test_name, False))
        
        time.sleep(1)  # Delay gi·ªØa c√°c test
    
    # T·ªïng k·∫øt
    print("\n" + "=" * 60)
    print("üìã K·∫æT QU·∫¢ TEST:")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{test_name:15} : {status}")
        if result:
            passed += 1
    
    print("=" * 60)
    print(f"T·ªïng k·∫øt: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ T·∫•t c·∫£ test ƒë·ªÅu PASS! H·ªá th·ªëng s·∫µn s√†ng ho·∫°t ƒë·ªông.")
        print("\nCh·∫°y l·ªánh sau ƒë·ªÉ b·∫Øt ƒë·∫ßu gi√°m s√°t:")
        print("python main.py")
    else:
        print("‚ö†Ô∏è  M·ªôt s·ªë test FAIL. H√£y ki·ªÉm tra c·∫•u h√¨nh tr∆∞·ªõc khi ch·∫°y h·ªá th·ªëng.")
        
        if not any(name == "Telegram" and result for name, result in results):
            print("\nüí° H∆∞·ªõng d·∫´n c·∫•u h√¨nh Telegram:")
            print("1. T·∫°o bot t·∫°i @BotFather")
            print("2. L·∫•y Bot Token")
            print("3. L·∫•y Chat ID")
            print("4. C·∫≠p nh·∫≠t config.py")

if __name__ == "__main__":
    main()
