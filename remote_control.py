"""
Remote Control Module for Intrusion Warning System
Handles Telegram bot commands: /chup, /mo, /thoat
"""

import cv2
import os
import threading
import time
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, ALERT_IMAGES_DIR

class RemoteController:
    def __init__(self):
        self.shared_camera = None  # Camera s·∫Ω ƒë∆∞·ª£c chia s·∫ª t·ª´ main system
        self.camera_active = False
        self.monitoring_thread = None
        self.should_stop = False
        self.last_frame = None  # L∆∞u frame cu·ªëi c√πng ƒë·ªÉ ch·ª•p nhanh
        
    def set_shared_camera(self, camera):
        """Thi·∫øt l·∫≠p camera chia s·∫ª t·ª´ main system"""
        self.shared_camera = camera
        
    def update_frame(self, frame):
        """C·∫≠p nh·∫≠t frame m·ªõi nh·∫•t t·ª´ main system"""
        self.last_frame = frame.copy()
        
    def take_photo(self):
        """Ch·ª•p ·∫£nh t·ª´ camera - KH√îNG t·∫Øt ch∆∞∆°ng tr√¨nh"""
        try:
            # S·ª≠ d·ª•ng frame hi·ªán t·∫°i thay v√¨ t·∫°o camera m·ªõi
            if self.last_frame is not None:
                # L∆∞u ·∫£nh t·ª´ frame hi·ªán t·∫°i
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"remote_capture_{timestamp}.jpg"
                filepath = os.path.join(ALERT_IMAGES_DIR, filename)
                cv2.imwrite(filepath, self.last_frame)
                
                return filepath, "üì∏ Ch·ª•p ·∫£nh th√†nh c√¥ng t·ª´ camera ch√≠nh"
            
            # Fallback: n·∫øu kh√¥ng c√≥ frame, th·ª≠ camera tr·ª±c ti·∫øp NH∆ØNG KH√îNG gi·ªØ l√¢u
            elif self.shared_camera is not None:
                ret, frame = self.shared_camera.read()
                if ret:
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    filename = f"remote_capture_{timestamp}.jpg"
                    filepath = os.path.join(ALERT_IMAGES_DIR, filename)
                    cv2.imwrite(filepath, frame)
                    
                    return filepath, "üì∏ Ch·ª•p ·∫£nh th√†nh c√¥ng"
                else:
                    return None, "‚ùå Kh√¥ng th·ªÉ ƒë·ªçc frame t·ª´ camera"
            else:
                return None, "‚ùå Camera ch∆∞a s·∫µn s√†ng"
                
        except Exception as e:
            print(f"L·ªói khi ch·ª•p ·∫£nh: {str(e)}")
            return None, f"‚ùå L·ªói: {str(e)}"
    
    def start_camera_monitoring(self):
        """B·∫Øt ƒë·∫ßu gi√°m s√°t camera"""
        try:
            if self.camera_active:
                return "üìπ Camera ƒë√£ ƒëang ho·∫°t ƒë·ªông"
            
            self.camera = cv2.VideoCapture(0)
            if not self.camera.isOpened():
                return "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi camera"
            
            self.camera_active = True
            self.should_stop = False
            
            # T·∫°o thread ri√™ng ƒë·ªÉ hi·ªÉn th·ªã camera
            self.monitoring_thread = threading.Thread(target=self._camera_loop)
            self.monitoring_thread.daemon = True
            self.monitoring_thread.start()
            
            print("Camera monitoring started via remote command")
            return "üìπ ƒê√£ b·∫≠t camera gi√°m s√°t. Nh·∫•n 'q' tr√™n c·ª≠a s·ªï camera ƒë·ªÉ t·∫Øt."
            
        except Exception as e:
            print(f"L·ªói khi b·∫≠t camera: {str(e)}")
            return f"‚ùå L·ªói: {str(e)}"
    
    def _camera_loop(self):
        """V√≤ng l·∫∑p hi·ªÉn th·ªã camera"""
        cv2.namedWindow("üìπ Remote Camera Monitor", cv2.WINDOW_AUTOSIZE)
        
        while self.camera_active and not self.should_stop:
            try:
                ret, frame = self.camera.read()
                if not ret:
                    break
                
                # Th√™m timestamp l√™n ·∫£nh
                timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                cv2.putText(frame, f"Remote Monitor: {timestamp}", 
                           (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
                
                cv2.imshow("üìπ Remote Camera Monitor", frame)
                
                # Tho√°t khi nh·∫•n 'q'
                if cv2.waitKey(1) & 0xFF == ord('q'):
                    break
                    
                time.sleep(0.03)  # ~30 FPS
                
            except Exception as e:
                print(f"L·ªói trong camera loop: {str(e)}")
                break
        
        self._cleanup_camera()
    
    def stop_monitoring(self):
        """D·ª´ng gi√°m s√°t camera"""
        try:
            if not self.camera_active:
                return "üìπ Camera ch∆∞a ƒë∆∞·ª£c b·∫≠t"
            
            self.should_stop = True
            self.camera_active = False
            
            # ƒê·ª£i thread k·∫øt th√∫c
            if self.monitoring_thread and self.monitoring_thread.is_alive():
                self.monitoring_thread.join(timeout=2)
            
            self._cleanup_camera()
            print("Camera monitoring stopped via remote command")
            return "üìπ ƒê√£ t·∫Øt camera gi√°m s√°t"
            
        except Exception as e:
            print(f"L·ªói khi t·∫Øt camera: {str(e)}")
            return f"‚ùå L·ªói: {str(e)}"
    
    def _cleanup_camera(self):
        """D·ªçn d·∫πp camera"""
        if self.camera:
            self.camera.release()
            self.camera = None
        cv2.destroyAllWindows()
        self.camera_active = False

# Kh·ªüi t·∫°o controller to√†n c·ª•c
remote_controller = RemoteController()

# Bot command handlers
async def cmd_chup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω l·ªánh /chup - ch·ª•p ·∫£nh"""
    # Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    chat_id = str(update.effective_chat.id)
    if chat_id != TELEGRAM_CHAT_ID:
        await update.message.reply_text("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng bot n√†y")
        return
    
    await update.message.reply_text("üì∏ ƒêang ch·ª•p ·∫£nh...")
    
    filepath, message = remote_controller.take_photo()
    
    if filepath and os.path.exists(filepath):
        # G·ª≠i ·∫£nh v·ªÅ Telegram
        try:
            with open(filepath, 'rb') as photo:
                await update.message.reply_photo(photo=photo, caption=message)
        except Exception as e:
            await update.message.reply_text(f"‚ùå L·ªói khi g·ª≠i ·∫£nh: {str(e)}")
    else:
        await update.message.reply_text(message)

async def cmd_mo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω l·ªánh /mo - m·ªü camera"""
    # Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    chat_id = str(update.effective_chat.id)
    if chat_id != TELEGRAM_CHAT_ID:
        await update.message.reply_text("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng bot n√†y")
        return
    
    message = remote_controller.start_camera_monitoring()
    await update.message.reply_text(message)

async def cmd_thoat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω l·ªánh /thoat - t·∫Øt camera"""
    # Ki·ªÉm tra quy·ªÅn truy c·∫≠p
    chat_id = str(update.effective_chat.id)
    if chat_id != TELEGRAM_CHAT_ID:
        await update.message.reply_text("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng bot n√†y")
        return
    
    message = remote_controller.stop_monitoring()
    await update.message.reply_text(message)

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω l·ªánh /start - h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"""
    help_text = """ü§ñ **Bot ƒêi·ªÅu Khi·ªÉn Camera T·ª´ Xa**

üìã **C√°c l·ªánh c√≥ s·∫µn:**
‚Ä¢ /chup - Ch·ª•p ·∫£nh t·ª´ camera
‚Ä¢ /mo - B·∫≠t camera gi√°m s√°t  
‚Ä¢ /thoat - T·∫Øt camera gi√°m s√°t
‚Ä¢ /help - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y

üîí **B·∫£o m·∫≠t:** Ch·ªâ ch·ªß s·ªü h·ªØu m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng bot n√†y."""
    await update.message.reply_text(help_text)

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω l·ªánh /help"""
    await cmd_start(update, context)

def start_remote_bot():
    """Kh·ªüi ƒë·ªông bot ƒëi·ªÅu khi·ªÉn t·ª´ xa"""
    if not TELEGRAM_BOT_TOKEN:
        print("‚ùå Ch∆∞a c·∫•u h√¨nh TELEGRAM_BOT_TOKEN")
        return None
    
    # T·∫°o application
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # Th√™m handlers
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("chup", cmd_chup))
    app.add_handler(CommandHandler("mo", cmd_mo))
    app.add_handler(CommandHandler("thoat", cmd_thoat))
    
    return app

if __name__ == "__main__":
    # Test ch·∫°y bot
    print("ü§ñ Kh·ªüi ƒë·ªông Bot ƒêi·ªÅu Khi·ªÉn T·ª´ Xa...")
    app = start_remote_bot()
    if app:
        print("‚úÖ Bot ƒë√£ s·∫µn s√†ng! G·ª≠i /start ƒë·ªÉ xem h∆∞·ªõng d·∫´n.")
        app.run_polling()
